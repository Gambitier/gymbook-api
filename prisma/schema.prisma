// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoleEnum {
  SUPERADMIN
  ADMIN
  USER
}

model UserRole {
  id        String       @id @default(uuid()) @db.Uuid
  role      UserRoleEnum @default(USER)
  createdAt DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt DateTime     @updatedAt @db.Timestamptz(6)
  deleted   DateTime?    @db.Timestamptz(6)
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.Uuid
}

enum GenderEnum {
  MALE
  FEMALE
  OTHER
  UNSPECIFIED
}

model User {
  id          String     @id @default(uuid()) @db.Uuid
  prefix      String     @db.VarChar(10)
  firstName   String     @db.VarChar(50)
  middleName  String?    @db.VarChar(50)
  lastName    String     @db.VarChar(50)
  email       String     @unique
  phone       String     @unique
  password    String
  gender      GenderEnum @default(UNSPECIFIED)
  dateOfBirth DateTime?  @db.Date
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime   @updatedAt @db.Timestamptz(6)
  deleted     DateTime?  @db.Timestamptz(6)
  gyms        Gym[]
  userRoles   UserRole[]
}

model Gym {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  userId    String   @db.Uuid
  adminUser User     @relation(fields: [userId], references: [id])
  batches   Batch[]
  plans     Plan[]
  members   Member[]
}

model Batch {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  batchLimit  Int
  gymId       String       @db.Uuid
  gym         Gym          @relation(fields: [gymId], references: [id])
  startTime   Time         @relation("startTimeOfBatch", fields: [startTimeId], references: [id])
  startTimeId Int          @unique
  endTime     Time         @relation("endTimeOfBatch", fields: [endTimeId], references: [id])
  endTimeId   Int          @unique
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @updatedAt @db.Timestamptz(6)
  deleted     DateTime?    @db.Timestamptz(6)
  memebers    MemberPlan[]
}

model Plan {
  id              String       @id @default(uuid()) @db.Uuid
  name            String
  price           Float
  durationInMoths Int
  gym             Gym          @relation(fields: [gymId], references: [id])
  createdAt       DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime     @updatedAt @db.Timestamptz(6)
  deleted         DateTime?    @db.Timestamptz(6)
  memebers        MemberPlan[]
  gymId           String       @db.Uuid
}

model Time {
  id         Int    @id @default(autoincrement())
  hour       Int
  minute     Int
  startBatch Batch? @relation("startTimeOfBatch")
  endBatch   Batch? @relation("endTimeOfBatch")
}

enum TrainingTypeEnum {
  GENERAL
  PERSONAL
}

enum DiscountTypeEnum {
  AMOUNT
  PERCENTAGE
}

model Member {
  id               String       @id @default(uuid()) @db.Uuid
  membershipId     Int          @default(autoincrement())
  firstName        String
  lastName         String
  mobile           String       @unique
  countryShortCode String
  countryCode      String
  email            String       @unique
  dob              DateTime
  gender           GenderEnum
  dateOfJoing      DateTime
  address          String?
  notes            String?
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(6)
  deleted          DateTime?    @db.Timestamptz(6)
  plans            MemberPlan[]
  gym              Gym          @relation(fields: [gymId], references: [id])
  gymId            String       @db.Uuid
}

model MemberPlan {
  id            String              @id @default(uuid()) @db.Uuid
  memberId      String              @db.Uuid
  member        Member              @relation(fields: [memberId], references: [id])
  planId        String              @db.Uuid
  plan          Plan                @relation(fields: [planId], references: [id])
  batchId       String              @db.Uuid
  batch         Batch               @relation(fields: [batchId], references: [id])
  startDate     DateTime            @db.Timestamptz(6)
  trainingType  TrainingTypeEnum
  admissionFees Float
  discount      Float
  discountType  DiscountTypeEnum
  createdAt     DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime            @updatedAt @db.Timestamptz(6)
  deleted       DateTime?           @db.Timestamptz(6)
  payments      MemberPlanPayment[]
}

model MemberPlanPayment {
  id           String     @id @default(uuid()) @db.Uuid
  amountPaid   Float
  memberPlanId String     @db.Uuid
  memberPlan   MemberPlan @relation(fields: [memberPlanId], references: [id])
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt @db.Timestamptz(6)
  deleted      DateTime?  @db.Timestamptz(6)
}
